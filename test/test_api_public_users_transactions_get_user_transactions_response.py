# coding: utf-8

"""
MoneyKit API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-02-18
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from moneykit.models.api_public_users_transactions_get_user_transactions_response import (
    ApiPublicUsersTransactionsGetUserTransactionsResponse,
)


class TestApiPublicUsersTransactionsGetUserTransactionsResponse(unittest.TestCase):
    """ApiPublicUsersTransactionsGetUserTransactionsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(
        self, include_optional
    ) -> ApiPublicUsersTransactionsGetUserTransactionsResponse:
        """Test ApiPublicUsersTransactionsGetUserTransactionsResponse
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ApiPublicUsersTransactionsGetUserTransactionsResponse`
        """
        model = ApiPublicUsersTransactionsGetUserTransactionsResponse()
        if include_optional:
            return ApiPublicUsersTransactionsGetUserTransactionsResponse(
                transactions = [
                    moneykit.models.transaction.Transaction(
                        transaction_id = 'c7318ff7-257c-490e-8242-03a815b223b7', 
                        account_id = 'acc_6Tef269B6ZArSVpYrxtjBV', 
                        amount = '384.05', 
                        type = debit, 
                        currency = 'USD', 
                        date = '2023-02-16T00:00:00', 
                        datetime = '2023-02-16T09:14:11', 
                        description = 'Regina's Mulberry', 
                        raw_description = 'Regina's Mulberry #1402 T48999-84', 
                        pending = True, 
                        category = 'food_and_drinks.restaurants', )
                    ],
                accounts = {
                    'key' : moneykit.models.basic_account_details.BasicAccountDetails(
                        name = 'Premier Checking', 
                        last_synced_at = '2023-02-16T09:14:11', 
                        institution_id = '', 
                        link_id = '', )
                    },
                cursor = moneykit.models.cursor_pagination.CursorPagination(
                    next = 'c2FtcGxlIGN1cnNvcg==', )
            )
        else:
            return ApiPublicUsersTransactionsGetUserTransactionsResponse(
                transactions = [
                    moneykit.models.transaction.Transaction(
                        transaction_id = 'c7318ff7-257c-490e-8242-03a815b223b7', 
                        account_id = 'acc_6Tef269B6ZArSVpYrxtjBV', 
                        amount = '384.05', 
                        type = debit, 
                        currency = 'USD', 
                        date = '2023-02-16T00:00:00', 
                        datetime = '2023-02-16T09:14:11', 
                        description = 'Regina's Mulberry', 
                        raw_description = 'Regina's Mulberry #1402 T48999-84', 
                        pending = True, 
                        category = 'food_and_drinks.restaurants', )
                    ],
                accounts = {
                    'key' : moneykit.models.basic_account_details.BasicAccountDetails(
                        name = 'Premier Checking', 
                        last_synced_at = '2023-02-16T09:14:11', 
                        institution_id = '', 
                        link_id = '', )
                    },
                cursor = moneykit.models.cursor_pagination.CursorPagination(
                    next = 'c2FtcGxlIGN1cnNvcg==', ),
        )
        """

    def testApiPublicUsersTransactionsGetUserTransactionsResponse(self):
        """Test ApiPublicUsersTransactionsGetUserTransactionsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
